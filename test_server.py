import asyncio

from server import is_prime, get_prime_factors


loop = asyncio.get_event_loop()

async def helper(func, iterator, checker):
    """
    Вспомогательная сопрограмма для тестирования сопрограмм.

    """
    for i in iterator:
        res = await func(i)
        print('Test', i, '/ Res:', res)
        assert checker(i) == res

def test__is_prime():
    """
    Правильно ли функция is_prime определяет простые числа.

    """

    # Тестовый набор простых чисел
    # http://denisx.ru/tech/prime-number/prime-numbers-list/
    primes = [
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,
        67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,
        139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,
        223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,
        293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,
        383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461,
        463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
        569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,
        647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739,
        743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,
        839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,
        941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021]

    loop.run_until_complete(helper(is_prime, range(-2, max(primes) + 1),
                                    lambda i: i in primes))

def test__get_prime_factors():
    """
    Проверка функции get_prime_factors

    """
    # https://www.calc.ru/Tablitsa-Razlozheniya-Na-Prostyye-Mnozhiteli-Do-10-000.html
    factors = {
        0: '', 1: '', 2: '2', 3: '3', 4: '2 2', 5: '5', 6: '2 3',
        2070: '2 3 3 5 23', 2071: '19 109', 2072: '2 2 2 7 37',
        2080: '2 2 2 2 2 5 13', 2100: '2 2 3 5 5 7', 2176: '2 2 2 2 2 2 2 17',
        2255: '5 11 41', 2256: '2 2 2 2 3 47', 2257: '37 61', 2284: '2 2 571',
        2285: '5 457', 2286: '2 3 3 127', 2321: '11 211', 2322: '2 3 3 3 43',
        2382: '2 3 397', 2384: '2 2 2 2 149', 2385: '3 3 5 53', 2386: '2 1193',
        2387: '7 11 31', 2388: '2 2 3 199', 2390: '2 5 239', 2391: '3 797',
        2484: '2 2 3 3 3 23', 2485: '5 7 71', 2486: '2 11 113', 2533: '17 149',
        2534: '2 7 181', 2535: '3 5 13 13', 2536: '2 2 2 317', 2537: '43 59',
        2637: '3 3 293', 2694: '2 3 449', 2695: '5 7 7 11', 2696: '2 2 2 337',
        2697: '3 29 31', 2698: '2 19 71', 2700: '2 2 3 3 3 5 5', 2701: '37 73',
        2804: '2 2 701', 2805: '3 5 11 17', 2806: '2 23 61', 2807: '7 401',
        2808: '2 2 2 3 3 3 13', 2809: '53 53', 2810: '2 5 281', 2921: '23 127',
        2930: '2 5 293', 2931: '3 977', 2932: '2 2 733', 2933: '7 419',
        2934: '2 3 3 163', 2935: '5 587', 3002: '2 19 79', 3003: '3 7 11 13',
        3012: '2 2 3 251', 3013: '23 131', 3014: '2 11 137', 3015: '3 3 5 67',
        3016: '2 2 2 13 29', 3017: '7 431', 3053: '43 71', 3054: '2 3 509',
        3064: '2 2 2 383', 3065: '5 613', 3066: '2 3 7 73', 3088: '2 2 2 2 193',
        3090: '2 3 5 103', 3091: '11 281', 3092: '2 2 773', 3093: '3 1031',
        3170: '2 5 317', 3171: '3 7 151', 3172: '2 2 13 61', 3293: '37 89',
        3294: '2 3 3 3 61', 3295: '5 659', 3339: '3 3 7 53', 3340: '2 2 5 167',
        3484: '2 2 13 67', 3570: '2 3 5 7 17', 3572: '2 2 19 47',
        3573: '3 3 397', 3574: '2 1787', 3575: '5 5 11 13', 3576: '2 2 2 3 149',
        3759: '3 7 179', 3760: '2 2 2 2 5 47', 3762: '2 3 3 11 19',
        3763: '53 71', 3764: '2 2 941', 3765: '3 5 251', 3766: '2 7 269',
        3946: '2 1973', 3968: '2 2 2 2 2 2 2 31', 3969: '3 3 3 3 7 7',
        3970: '2 5 397', 3971: '11 19 19', 3972: '2 2 3 331', 3973: '29 137',
        4045: '5 809', 4046: '2 7 17 17', 4096: '2 2 2 2 2 2 2 2 2 2 2 2',
        8199: '3 3 911', 8200: '2 2 2 5 5 41', 8201: '59 139', 
        9995: '5 1999', 9996: '2 2 3 7 7 17', 9997: '13 769', 9998: '2 4999',
    }
    loop.run_until_complete(helper(get_prime_factors, (i for i in factors),
                                    lambda i: list(map(int, factors[i].split()))))
